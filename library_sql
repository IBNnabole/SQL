to create table
CREATE TABLE book (
  title varchar(100),
  isbn varchar(50),
  pages integer,
  price money,
  description varchar(256),
  publisher varchar(100)
);
////

to add smth in it
INSERT INTO book VALUES (
  'Postgres for Beginners',
  '0-5980-6249-1',
  25,
  4.99,
  'Learn Postgres the Easy Way',
  'Codecademy Publishing'
);
////

to select smth
SELECT * FROM book WHERE title = 'Postgres for Beginners';

SELECT * FROM book WHERE isbn = '0-5980-6249-1';
////
To delete column:

ALTER TABLE chapter DROP COLUMN content;
////

primary key:

CREATE TABLE book (
  title varchar(100),
  isbn varchar(50) PRIMARY KEY,  <-------------
  pages integer,
  price money,
  description varchar(256),
  publisher varchar(100)
);
/////////////////////////////////
узнать ограничения, наложенные на определенные столбцы в таблице, например recipe:

SELECT
  constraint_name, table_name, column_name - constraint_name <--- Чей ключ?!?
FROM
  information_schema.key_column_usage  <---- Эта штука узнает pk
WHERE
  table_name = 'recipe';

 constraint_name | table_name | column_name 
-----------------+------------+-------------
 recipe_pkey     | recipe     | id
(1 row)
///////////////////////////////////
Иногда ни один из столбцов в таблице не может однозначно идентифицировать запись. 
Когда это происходит, мы можем назначить несколько столбцов в таблице, которые будут служить первичным ключом, также известным как составной первичный ключ. 

 author_name |      book_title      
-------------+----------------------
 Liz Key     | Postgres Made Easy
 Liz Key     | Postgres for Dummies
 Tom Index   | Postgres Made Easy
 Tom Index   | Beginner Postgres

Чтобы назначить несколько столбцов составным первичным ключом:
CREATE TABLE popular_recipes (
  recipe_id varchar(20),
  ingredient_id varchar(20),
  downloaded integer,
  PRIMARY KEY (recipe_id, ingredient_id) <------
);
////
CREATE TABLE popular_books(
  book_title varchar(100),
  author_name varchar(50),
  number_sold integer,
  number_previewed integer,
  PRIMARY KEY (book_title, author_name)
);

SELECT constraint_name, table_name, column_name
FROM information_schema.key_column_usage
WHERE table_name = 'popular_books';
// output
constraint_name	    table_name	    column_name
popular_books_pkey	popular_books	  book_title
popular_books_pkey	popular_books	  author_name
/////////////////////////////////////////
Требуется ли для создания emailзаписи наличие действующей personзаписи? 
Обычно это так, поскольку мы не должны создавать адрес электронной почты для несуществующего человека. 
Следовательно, мы должны поместить внешний ключ в email таблицу, чтобы гарантировать, 
что действительная запись в personтаблице должна существовать до добавления записи в email таблицу.

CREATE TABLE person (
  id integer PRIMARY KEY,
  name varchar(20),
  age integer
);
 
CREATE TABLE email (
  email varchar(20) PRIMARY KEY,
  person_id integer REFERENCES person(id),
  storage integer,
  price money
);
//////////////////////////////////
foreign key:

CREATE TABLE book (
  title varchar(100),
  isbn varchar(50) PRIMARY KEY,
  pages integer,
  price money,
  description varchar(256),
  publisher varchar(100)
);

CREATE TABLE chapter (
  id integer PRIMARY KEY,
  number integer,
  title varchar(50),
  content varchar(1024),
  book_isbn varchar(50) REFERENCES book(isbn)
);

SELECT constraint_name, table_name, column_name
FROM information_schema.key_column_usage
WHERE table_name = 'chapter';
////

SELECT * FROM book;
SELECT * FROM chapter;

SELECT book.title AS book, chapter.title AS chapters
FROM book, chapter
WHERE book.isbn = chapter.book_isbn; <----- output table with books and this chapters, because of pk in books and fk in chapter

///////////////////////////////////////////////////////////// один-к-одному

Чтобы установить в PostgreSQL взаимно-однозначную связь между этими двумя таблицами, нам нужно назначить внешний ключ в одной из таблиц. 
нам нужно еще одно ключевое слово, UNIQUE. Добавив это ключевое слово в объявление внешнего ключа

CREATE TABLE driver (
    license_id char(20) PRIMARY KEY,
    name varchar(20),
    address varchar(100),
    date_of_birth date
);      
 
CREATE TABLE license (
    id integer PRIMARY KEY,
    state_issued varchar(20),
    date_issued date,
    date_expired  date,
    license_id char(20) REFERENCES driver(license_id) UNIQUE
); 
////////////

CREATE TABLE book_details (
  id integer PRIMARY KEY,
  book_isbn varchar(50) REFERENCES book(isbn) UNIQUE,
  rating decimal,
  language varchar(10),
  keywords text[],
  date_published date
);

SELECT constraint_name, table_name, column_name
FROM information_schema.key_column_usage
WHERE table_name = 'book_details';

INSERT INTO book VALUES (
  'Learn PostgreSQL',
  '123457890',
  100,
  2.99,
  'Great course',
  'Codecademy'
);

INSERT INTO book_details VALUES (
  1,
  '123457890',
  3.95,
  'English',
  '{sql, postgresql, database}',
  '2020-05-20'
);

SELECT book.title AS title, book.price AS price, book_details.language AS language, book_details.rating AS rating
FROM book, book_details
WHERE book.isbn = book_details.book_isbn;
//output
title	            price	  language	rating
Learn PostgreSQL	$2.99	  English	  3.95
///////////////////////////////////////////////////////// один-ко-многим

CREATE TABLE page (
  id integer PRIMARY KEY,
  chapter_id integer REFERENCES chapter(id),
  content text,
  header varchar(20),
  footer varchar(20)
);

ALTER TABLE chapter DROP COLUMN content;

SELECT constraint_name, table_name, column_name
FROM information_schema.key_column_usage
WHERE table_name = 'page';

// запрос соединяющий book, chapter и page таблицы, и отобразите результаты как book_title, chapter_title и page_content.
SELECT book.title AS book_title, chapter.title AS chapter_title, page.content AS page_content
FROM book INNER JOIN chapter
ON book.isbn = chapter.book_isbn
INNER JOIN page
ON chapter.id = page.chapter_id;

//////////////////////////////////////////////////// многие ко многим

Чтобы реализовать отношение «многие ко многим» в реляционной базе данных, 
мы должны создать третью таблицу перекрестных ссылок, также известную как таблица соединений. 
У него будут эти два ограничения:

внешние ключи, ссылающиеся на первичные ключи двух таблиц-членов.
составной первичный ключ, состоящий из двух внешних ключей.

CREATE TABLE book (
  title varchar(100),
  isbn varchar(50) PRIMARY KEY,
  pages integer,
  price money,
  description varchar(256),
  publisher varchar(100)
);

CREATE TABLE author (
  name varchar(50),
  bio varchar(100),
  email varchar(20) PRIMARY KEY
);

CREATE TABLE books_authors (
  book_isbn varchar(50) REFERENCES book(isbn),
  author_email varchar(100) REFERENCES author(email),
  PRIMARY KEY (book_isbn, author_email)
);

SELECT constraint_name, table_name, column_name
FROM information_schema.key_column_usage
WHERE table_name = 'books_authors';

////

SELECT * FROM book;

SELECT * FROM author;

INSERT INTO books_authors VALUES (
  '123457890',
  'jkey@db.com'
);

INSERT INTO books_authors VALUES (
  '123457890',
  'cindex@db.com'
);

INSERT INTO books_authors VALUES (
  '987654321',
  'cindex@db.com'
);

SELECT
    book.title AS book_title,
    author.name AS author_name,
    book.description AS book_description
FROM
    book, author, books_authors
WHERE
    book.isbn = books_authors.book_isbn
AND
    author.email = books_authors.author_email;

SELECT
    author.name AS author_name,
    author.email AS author_email,
    book.title AS book_title
FROM
    book
JOIN
    books_authors
ON
    book.isbn = books_authors.book_isbn
JOIN
    author
ON
    author.email = books_authors.author_email;

//////////////////////////////////////////////// constraints
NOT NULL
мы можем отклонить вставки и обновления, которые не включают данные для определенных столбцов, добавив NOT NULLограничение для этих столбцов.

CREATE TABLE talks (
    id integer,
    title varchar NOT NULL,
    speaker_id integer NOT NULL,
    estimated_length integer,
    session_timeslot timestamp NOT NULL
);// if u will write like that, and dont add all columns in insert, u will have an error

all constraints we can add with ALTER TABLE

ALTER TABLE talks
ALTER COLUMN session_timeslot SET NOT NULL; // to set constraints

ALTER TABLE talks
ALTER COLUMN session_timeslot DROP NOT NULL // to drop constraints

Если коллона не соответствует условию, то мы не сможем применить ограничения
Для этого сначала приведем ее к нужным нам отвветам

UPDATE talks
SET title = 'TBD'
WHERE title IS NULL; // вот так мы заменили NULL to TBD и теперь можно применять ограничения

//// We can use CHECK (We can add it in CREATE TABLE or ALTER TABLE)

ALTER TABLE talks 
ADD CHECK (estimated_length > 0);
------->                 or                  <--------
CREATE TABLE ...(
estimated_length integer NOT NULL CHECK (estimated_length > 0)
);
//// in CHECK we can use all SQL requests like in WHERE path (IN, LIKE, AND, OR, ...)

ALTER TABLE talks 
ADD CHECK (estimated_length > 0 AND estimated_length < 120);
ALTER TABLE talks
ADD CHECK (estimated_length < 120 AND date_part('year', session_timeslot) = 2020); // date_part функция возвращает часть даты в виде целого числа 

ALTER TABLE attendees
ADD CHECK (standard_tickets_reserved + vip_tickets_reserved = total_tickets_reserved);
//// using-unique-constraints

ALTER TABLE attendees 
ADD UNIQUE (email);

ALTER TABLE talks
ADD UNIQUE (speaker_id, session_timeslot) // один и тот же айди не может быть в неск session_timeslot одновременно

CREATE TABLE registrations (
    id integer NOT NULL,
    attendee_id integer NOT NULL,
    session_timeslot timestamp NOT NULL,
    talk_id integer NOT NULL,
    UNIQUE (attendee_id, session_timeslot)
);
///////////////////////////// more about pk

ALTER TABLE speakers
ADD PRIMARY KEY (id);

INSERT INTO speakers (email, name, organization, title, years_in_role) 
VALUES ('J.Saunders@ABCTech.com', 'Joan Saunders', 'ABC Tech.', 'Sr. Data Scientist', 6);// have an error

INSERT INTO speakers (id, email, name, organization, title, years_in_role) 
VALUES (1, 'J.Saunders@ABCTech.com', 'Joan Saunders', 'ABC Tech.', 'Sr. Data Scientist', 6);

////////////////////////// more about FOREIGN KEY

Ссылочная целостность может быть обеспечена путем добавления FOREIGN KEY к дочерней таблице, которая ссылается на первичный ключ родительской таблицы.

ALTER TABLE registrations // дочерняя табл
ADD FOREIGN KEY (talk_id)
REFERENCES talks (id);
-------> or <------------
FOREIGN KEY (talk_id) REFERENCES talks (id)// if we create table


ALTER TABLE talks
ADD FOREIGN KEY (speaker_id)
REFERENCES speakers (id);

INSERT INTO talks VALUES (
  21,
  'Data Warehousing Best Practices',
  101,
  30,
  '2020-08-15 18:00'
); // error Key (speaker_id)=(101) is not present in table “speakers”.

////////////////////////////// foreign-keys-cascading-changes

REFERENCES talks (id) ON DELETE RESTRICT or REFERENCES talks (id) ON UPDATE RESTRICT // in CREATE TABLE

OR

ALTER TABLE registrations
ADD FOREIGN KEY (talk_id)
REFERENCES talks (id) ON DELETE CASCADE
//
ALTER TABLE talks
ADD FOREIGN KEY (speaker_id)
REFERENCES speakers (id) ON DELETE CASCADE;

SELECT * FROM talks WHERE speaker_id = 2;

DELETE FROM speakers 
WHERE id = 2;

SELECT * FROM talks WHERE speaker_id = 2;

//////////////////////////////////////////////// index

SELECT * FROM customers;

SELECT *
FROM pg_Indexes
WHERE tablename/indexname/indexdef = 'customers'; // to find all indexs in table

Чтобы понять, как PostgreSQL разбивает ваши операторы на выполняемые части, мы можем изучить план запроса, добавив его EXPLAIN ANALYZE перед запросом.

EXPLAIN ANALYZE SELECT * FROM customers WHERE first_name = 'David';
EXPLAIN ANALYZE SELECT * FROM customers WHERE last_name = 'Jones';

CREATE INDEX customers_city_idx ON customers (city);
//
CREATE INDEX customers_last_name_first_name_idx ON customers (last_name, first_name); // Многоколоночные индексы

EXPLAIN ANALYZE SELECT * FROM customers WHERE last_name = 'Jones' AND first_name = 'David';

CREATE INDEX customers_last_name_first_name_idx ON customers (last_name, first_name);
EXPLAIN ANALYZE SELECT * FROM customers WHERE last_name = 'Jones' AND first_name = 'David'; //faster
////

DROP INDEX IF EXISTS customers_last_name_idx; // to delete index

// Если мы добавляем/удаляем/обнновляем сразу много чего и с ними связаны индексы, то лучше убрать их, тк это будет быстрее.

SELECT pg_size_pretty (pg_total_relation_size('customers')); // to know weigth

// чтобы индекс работал быстрее надо чтобы 1 значение исп чаще всего в нашей задаче + не надо создавать индекс только ради 1-го запроса

SELECT NOW();
 
\COPY orders FROM 'orders_add.txt' DELIMITER ',' CSV HEADER; // вот так можно вставить в бд инфу
 
SELECT NOW();

/////////////////////////////////////////  partial-index/ПРОМЕЖУТОЧНЫЕ ИНДЕКСЫ

CREATE INDEX users_user_name_internal_idx ON users (user_name)
WHERE email_address LIKE '%@wellsfargo.com';

EXPLAIN ANALYZE SELECT * FROM customers WHERE years_old BETWEEN 13 AND 19;
CREATE INDEX customers_years_old_teen_idx ON customers (years_old) WHERE years_old BETWEEN 13 AND 19;
EXPLAIN ANALYZE SELECT * FROM customers WHERE years_old BETWEEN 13 AND 19; //faster


 Если ваш столбец содержит значения NULL, вы также можете указать порядок их появления, 
 добавив NULLS FIRST или NULLS LAST в соответствии с вашими потребностями.

//// order by

CREATE INDEX customers_state_name_email_address_idx ON customers (state_name, email_address);

EXPLAIN ANALYZE SELECT state_name, email_address FROM customers WHERE state_name = 'California' OR state_name = 'Ohio' ORDER BY state_name DESC, email_address;

CREATE INDEX customers_state_name_email_address_ordered_idx ON customers (state_name DESC, email_address ASC);

EXPLAIN ANALYZE SELECT state_name, email_address FROM customers WHERE state_name = 'California' OR state_name = 'Ohio' ORDER BY state_name DESC, email_address; // faster

///////// primary-keys-and-indexes

стандарт индекса первичного ключа должен заканчиваться, _pkey


////////////// clustered-index

Кластерный индекс часто привязан к первичному ключу таблицы.
 
Для кластеризации таблицы базы данных с использованием существующего индекса:
CLUSTER table_name USING index_name;

FOR EXAMPLE: CLUSTER customers USING customers_last_name_idx;

Если вы уже установили, какой индекс следует кластеризовать, вы можете просто указать системе, к какой таблице применить кластер.

CLUSTER products;

И если вы хотите сгруппировать каждую таблицу в своей базе данных, которая имеет определенный индекс для использования, вы можете просто вызвать

CLUSTER;


///////////// ПРОМЕЖУТОЧНЫЕ ИНДЕКСЫ or non-clustered-index

Некластеризованный индекс создает ключ для указанных вами столбцов и указатель на основную таблицу для любых столбцов, не являющихся частью индекса.
вам не нужно делать ничего особенного при создании индекса, чтобы он не был кластеризованным.

CREATE INDEX customers_state_name_idx ON customers (state_name);
SELECT last_name, state_name FROM customers WHERE state_name = 'Texas' ORDER BY last_name;

/////////////// index-only-scans or Сканирование только для индексации

EXPLAIN ANALYZE SELECT first_name, last_name, email_address FROM customers WHERE last_name = 'Smith';
CREATE INDEX customers_last_name_first_name_email_address_idx ON customers (last_name, first_name, email_address);
EXPLAIN ANALYZE SELECT first_name, last_name, email_address FROM customers WHERE last_name = 'Smith'; // faster because we dont need to go to the actual table to find the information you are requesting.

/////////////// combining-indexes or Объединение индексов

EXPLAIN ANALYZE SELECT * FROM customers WHERE last_name = 'Jones' AND first_name = 'Steve';

CREATE INDEX customers_last_name_first_name_idx ON customers (last_name, first_name); // its better idea of creating multi indeex if we need to have more that 2

EXPLAIN ANALYZE SELECT * FROM customers WHERE last_name = 'Jones' AND first_name = 'Steve'; // faster

///////////////// indexes-based-on-expressions (this indexes cost more)

CREATE UNIQUE INDEX unique_manufacture_company_name_idx ON manufacture(LOWER(company_name)); <---- lower


CREATE UNIQUE INDEX customers_email_address_lower_unique_idx ON customers (LOWER( email_address));
INSERT INTO customers (first_name, last_name, email_address)
VALUES ('bob', 'brown', 'test@sample.com'), ('Boris', 'Naishtut', 'Test@sample.com');  <---- we have an error


///////////////////////////////////////////////////////////

Чтобы создать новую таблицу из существующей, мы можем предшествовать любому запросу с помощью CREATE TABLE new_table_name AS. 
Например, следующий код выбирает уникальные значения major_1 и major_1_credits_reqd из исходной college таблицы
и вставки их в вновь созданную таблицу под названием majors:


CREATE TABLE majors AS
SELECT distinct major_1, major_1_credits_reqd
FROM college;

Используйте DISTINCT ключевое слово, чтобы включить только одну строку для каждого уникального основного направления
////

CREATE TABLE advisors AS
SELECT distinct advisor_email, advisor_name, advisor_department
FROM college;

ALTER TABLE college
DROP COLUMN advisor_name,
DROP COLUMN advisor_department;

SELECT * FROM advisors WHERE advisor_name = 'Brunson';
////

CREATE TABLE majors AS
SELECT DISTINCT major_1, major_1_credits_reqd
FROM college;

CREATE TABLE students_majors AS
SELECT major_1 as major, student_id
FROM college
UNION ALL
SELECT major_2 as major, student_id
FROM college
WHERE major_2 IS NOT NULL;

ALTER TABLE college
DROP COLUMN major_1,
DROP COLUMN major_1_credits_reqd,
DROP COLUMN major_2,
DROP COLUMN major_2_credits_reqd;

SELECT * FROM students_majors ORDER BY student_id LIMIT 10;


/////////////////////////// create a db list

CREATE TABLE advisors (
  id integer PRIMARY KEY,
  email varchar(100) UNIQUE,
  name varchar(100),
  department varchar(100)
);

CREATE TABLE students (
  id integer PRIMARY KEY,
  name varchar(100),
  year varchar(50),
  email varchar(100) UNIQUE,
  advisor_id integer REFERENCES advisors(id)
);

CREATE TABLE majors (
  id integer PRIMARY KEY,
  major varchar(100),
  credits_reqd integer
);

CREATE TABLE students_majors (
  student_id integer REFERENCES students(id),
  major_id integer REFERENCES majors(id)
);


SELECT major, count(*)
FROM students_majors, majors
WHERE major_id = id
GROUP BY major
ORDER BY count DESC; // count of students in each sub

// сколько студентов советуют факультет в каждой кафедре, мы должны присоединиться к students и advisors таблицам вместе:

SELECT COUNT(students.id), advisors.department as advisor_department
FROM students, advisors
WHERE students.advisor_id = advisors.id
GROUP BY advisor_department;

// отправить студентам по электронной почте напоминание о количестве кредитов, необходимых для их специальности (-ей).

SELECT student_id, SUM(credits_reqd) as total_credits, MIN(email) AS student_email
FROM students, students_majors, majors
WHERE students.id = students_majors.student_id
AND students_majors.major_id = majors.id
GROUP BY student_id;









